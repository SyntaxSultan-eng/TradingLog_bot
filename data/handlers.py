from decouple import config
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State,StatesGroup
from aiogram.fsm.context import FSMContext

import data.keyboards as keyboard
import data.requests as rq

######################################

router = Router()

class Stocks(StatesGroup):
    name_stock = State()
    amount = State()
    trade_date = State()
    price = State()
    type_of_stock = State()
    info = State()

######################################

############# –ö–æ–º–∞–Ω–¥—ã ################

@router.message(Command('start'))
async def start_check(message: types.Message) -> None:
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer(
            "<i>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–ª–∞–¥</i>! –ù–∞—á–Ω–∏—Ç–µ –∂–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.",
            reply_markup=keyboard.main_keyboard,
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        "<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç.</i>",
        parse_mode="HTML"
    )

#######################################

############ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—åüìù ##########

@router.message(F.text == "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—åüìù")
async def new_deal(message: types.Message) -> None:
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer(
            "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –í–∞—à–µ–π —Å–¥–µ–ª–∫–∏ –º–µ—Å—Ç–æ –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.‚öôÔ∏è",
        )
        await message.answer(
            "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏.</i>",
            parse_mode = "HTML",
            reply_markup=keyboard.new_deal_keyboard,
        )
        return
    await message.answer(
        "<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç.</i>",
        parse_mode="HTML"
    )


@router.message(F.text == "–ü–æ–∫—É–ø–∫–∞üìà")
async def buy_deal(message: types.Message, state: FSMContext) -> None:
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏</b>, –∫–æ—Ç–æ—Ä—É—é –í—ã –∫—É–ø–∏–ª–∏.",
            parse_mode = "HTML",
        )
        await state.set_state(Stocks.name_stock) 
        return
    await message.answer(
        "<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç.</i>",
        parse_mode="HTML",
    )

@router.message(Stocks.name_stock)
async def name_of_stock(message: types.Message, state: FSMContext):
    await state.update_data(name_stock = message.text)
    data = await state.get_data()
    await rq.add_name_stock(data['name_stock'])
    
    await message.answer(
        "SPS",
        reply_markup=keyboard.main_keyboard,
    )
    await state.clear()


#######################################