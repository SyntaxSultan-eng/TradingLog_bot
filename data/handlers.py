from decouple import config
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State,StatesGroup
from aiogram.fsm.context import FSMContext

import data.keyboards as keyboard
import data.request as rq
import os


######################################

router = Router()

class Stocks(StatesGroup):
    name_stock = State()
    amount = State()
    price = State()
    deal_type = State()

######################################

############# –ö–æ–º–∞–Ω–¥—ã ################

@router.message(Command('start'))
async def start_check(message: types.Message) -> None:
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer(
            "<i>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–ª–∞–¥</i>! –ù–∞—á–Ω–∏—Ç–µ –∂–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.",
            reply_markup=keyboard.main_keyboard,
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        "<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç.</i>",
        parse_mode="HTML"
    )

#######################################

############ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—åüìù ##########

@router.message(F.text == "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—åüìù")
async def new_deal(message: types.Message) -> None:
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer(
            "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –í–∞—à–µ–π —Å–¥–µ–ª–∫–∏ –º–µ—Å—Ç–æ –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.‚öôÔ∏è",
        )
        await message.answer(
            "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏.</i>",
            parse_mode = "HTML",
            reply_markup=keyboard.new_deal_keyboard,
        )
        return
    await message.answer(
        "<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç.</i>",
        parse_mode="HTML"
    )

@router.message(F.text == "–ù–∞–∑–∞–¥üîô")
async def return_back(message: types.Message, state: FSMContext):
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞—é –í–∞—Å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!üîô",
            reply_markup=keyboard.main_keyboard
        )
        await state.clear()
        return
    await message.answer(
        "<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç.</i>",
        parse_mode="HTML"
    )

@router.message(F.text == "–ü–æ–∫—É–ø–∫–∞üìà")
async def buy_deal(message: types.Message, state: FSMContext):
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏</b>, –∫–æ—Ç–æ—Ä—É—é –í—ã –∫—É–ø–∏–ª–∏.",
            parse_mode="HTML"
        )
        await message.answer(
            "<u><b>–í–ê–ñ–ù–û!</b></u>\n\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å <b>—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é</b> —Ü–µ–Ω–Ω—É—é –±—É–º–∞–≥—É.(–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ Ru —Ä—ã–Ω–æ–∫ –∞–∫—Ü–∏–π)\n\n" + \
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ –∏—Ö —Ç–∏–∫–µ—Ä—ã.",
            parse_mode = "HTML",
            reply_markup=keyboard.names_stocks_inline
        )
        await state.update_data(deal_type = "–ü–æ–∫—É–ø–∫–∞")
        return
    await message.answer(
        "<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç.</i>",
        parse_mode="HTML",
    )

@router.message(F.text == "–ü—Ä–æ–¥–∞–∂–∞üìâ")
async def sell_deal(message: types.Message, state:FSMContext):
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏</b>, –∫–æ—Ç–æ—Ä—É—é –í—ã –ø—Ä–æ–¥–∞–ª–∏.",
            parse_mode="HTML"
        )
        await message.answer(
            "<u><b>–í–ê–ñ–ù–û!</b></u>\n\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å <b>—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é</b> —Ü–µ–Ω–Ω—É—é –±—É–º–∞–≥—É.(–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ Ru —Ä—ã–Ω–æ–∫ –∞–∫—Ü–∏–π)\n\n" + \
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ –∏—Ö —Ç–∏–∫–µ—Ä—ã.",
            parse_mode = "HTML",
            reply_markup=keyboard.names_stocks_inline
        )
        await state.update_data(deal_type = "–ü—Ä–æ–¥–∞–∂–∞")
        return
    await message.answer(
        "<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç.</i>",
        parse_mode="HTML",
    )

@router.callback_query(F.data == "print_info")
async def print_stocks_names(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()

    file_path = os.path.join("data","requirements","–ê–∫—Ü–∏–∏.pdf")
    json_file = types.FSInputFile(file_path)

    await callback.message.answer_document(
        document=json_file,
        caption="–¢–∏–∫–µ—Ä—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ü–∏–π."
    )
    
    await callback.message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è.‚Üì"
    )
    await state.set_state(Stocks.name_stock)

@router.callback_query(F.data == "no_print_info")
async def no_print(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(Stocks.name_stock)    

@router.message(Stocks.name_stock)
async def name_of_stock(message: types.Message, state: FSMContext):
    await state.update_data(name_stock = message.text)
    data = await state.get_data()
    check = await rq.check_names(data['name_stock'])
    
    if not check:
        await state.clear()
        await message.answer(
            "<i>–ù–µ—Ç —Ç–∞–∫–æ–π —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏!</i>",
            parse_mode="HTML",
            reply_markup=keyboard.main_keyboard
        )
        return
    await state.set_state(Stocks.amount)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <i><b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b></i> –∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–æ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –≤ —Å–¥–µ–ª–∫–µ.<i><b>(—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞)</b></i>",
        parse_mode="HTML"
    )

@router.message(Stocks.amount)
async def amount_of_stock(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or message.text == '0':
        await message.answer(
            "<i><b>–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞!</b></i>",
            parse_mode="HTML",
            reply_markup=keyboard.main_keyboard
        )
        await state.clear()
        return
    await state.update_data(amount = int(message.text))
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b><i>–ø–æ–ª–Ω—É—é —Ü–µ–Ω—É</i></b> —Å–¥–µ–ª–∫–∏.(–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –±—Ä–æ–∫–µ—Ä–∞)\n\n<b><i>–¢–æ–ª—å–∫–æ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ >0(–¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .)</i></b>",
        parse_mode="HTML"
    )
    await state.set_state(Stocks.price)

@router.message(Stocks.price)
async def price_of_stock(message: types.Message, state: FSMContext):
    try:
        price_stock = float(message.text)
        if price_stock > 0:
            await state.update_data(price = price_stock)
            await message.answer(
                "–ó–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.‚öôÔ∏è",
            )

            data = await state.get_data()
            await rq.add_new_stock(data['name_stock'],data['amount'],data['price'],data['deal_type'])

            await message.answer(
                "<i><b>–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.</b></i>",
                reply_markup=keyboard.main_keyboard,
                parse_mode="HTML"
            )
        else:
           await message.answer(
                "<i><b>–¢–æ–ª—å–∫–æ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ >0</b></i>",
                parse_mode="HTML",
                reply_markup=keyboard.main_keyboard
            )
        await state.clear()
        return 
    except ValueError:
        await message.answer(
            "<i><b>–¢–æ–ª—å–∫–æ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ >0</b></i>",
            parse_mode="HTML",
            reply_markup=keyboard.main_keyboard
        )
        await state.clear()        

#######################################

######### –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä ######

@router.message(F.text == "–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä")
async def full_statistic(message: types.Message):
    if message.from_user.id != int(config("Admin_ID")):
        await message.answer(
            "<i>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç.</i>",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º</i>.‚§µÔ∏è",
        parse_mode="HTML",
        reply_markup=keyboard.full_statistic_buttons
    )

@router.callback_query(F.data == "full_static")
async def handle_full_stats(callback: types.CallbackQuery):
    await callback.message.delete()

    info = await rq.full_info()

    await callback.message.answer(
        "üîÅ <b>–°–¥–µ–ª–∫–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {info['total_deals']} ({info["total_deals_buy"]} –ø–æ–∫—É–ø–æ–∫ / {info["total_deals_sell"]} –ø—Ä–æ–¥–∞–∂)\n"
        f"‚Ä¢ –ü–æ–ª–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {info["total_buy"]} ‚ÇΩ\n"
        f"‚Ä¢ –ü–æ–ª–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {info["total_sell"]} ‚ÇΩ\n",
        parse_mode= "HTML",
        reply_markup=keyboard.main_keyboard
    )

@router.callback_query(F.data == "profit-stocks")
async def handler_profit(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=keyboard.main_keyboard
    )

@router.callback_query(F.data == "graph")
async def handler_graph(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=keyboard.main_keyboard
    )